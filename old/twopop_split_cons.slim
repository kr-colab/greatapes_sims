// set up a simple neutral simulation
initialize() {
	/*
	defineConstant("SIM", "teste");
	//defineConstant("path","/Users/murillo/Drive/phd/w19/rotation/trees/");
	defineConstant("N", 1000);
	defineConstant("mu", 1e-8);
	defineConstant("r", 1.5e-8);
	defineConstant("deff", 10);
	defineConstant("L", 5e7); // total chromosome length
	defineConstant("cons", "/Users/murillo/Drive/phd/w19/rotation/realistic/start_end_pos_cons.txt"); // random identifier
	defineConstant("RAND", 123); // random identifier
	*/
	//-d path='/Users/murillo/Drive/phd/w19/rotation/trees/' -d SIM=teste -d N=1000 -d mu=0.1e-8 -d r=1.5e-8 -d deff=10 -d L=5e7 -d L0=3e6 -d L1=2e6
	defineConstant("path","/tmp/");

	initializeTreeSeq();

	initializeMutationRate(mu);
	initializeMutationType("m2", 0.5, "e", -(deff/N));
	initializeRecombinationRate(r, L-1);
	initializeGenomicElementType("g2", m2, 1.0);
	if (mu > 0) {
		f = readFile("/gpfs/projects/kernlab/murillor/slim_sims/start_end_pos_cons.txt");
		for (line in f) {
			coord = asInteger(strsplit(line[0], "\t"));
			initializeGenomicElement(g2, coord[0], coord[1]);
		}
	} else {
		initializeGenomicElement(g2, 0, L-1);
	}
}

// create a population of N individuals
//schedule sampling times depending on N
1 {
	sim.addSubpop("p1", N);
	sim.rescheduleScriptBlock(s0, 10*N, 10*N); // subpopsplit
	t = c(seq(0,2,by=0.2),10);
	t = (t*N)+(10*N);
	t[0] = t[0]+1;
	sim.rescheduleScriptBlock(s1, generations=asInteger(t));
}

// burn in for 10N gen
// split into two subpops with N

s0 100 {
	sim.addSubpopSplit(2, N, 1);
	//p1.setMigrationRates(p2, m/N);
	//p2.setMigrationRates(p1, m/N);
}

// wait xN gen after split
s1 101 late() {
	sim.treeSeqOutput(path+ format("%.1f", (sim.generation-10*N)/N ) + "N_sim_"+SIM+"_RAND_"+RAND+".trees");
	//cat(path+ format("%.1f", (sim.generation-10*N)/N ) + "N_sim_"+SIM+"_RAND_"+RAND+".trees");
}


