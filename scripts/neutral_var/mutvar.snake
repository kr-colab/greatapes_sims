import numpy as np
import pandas as pd

def get_stats_outfiles_from_rands(rand_ids, stat_win_sizes, reps, mut_win_sizes, sigmas, total_mu, out_path, sample_size, sup=False, ext=".npz"):
    if not sup:
        return [f"{out_path}{rand_id}/rand-id_{rand_id}_rep_{rep}_win-size_{mut_win_size}_sample-size_{sample_size}_mut-win-size_{mut_win_size}_sigma_{sigma}_total-mut-rate_{total_mu}{ext}" for rand_id in rand_ids for rep in reps for mut_win_size in mut_win_sizes for sigma in sigmas]
    else:
        return [f"{out_path}sup-rand-id_{rand_id}_rep_{rep}_win-size_{mut_win_size}_sample-size_{sample_size}_mut-win-size_{mut_win_size}_sigma_{sigma}_total-mut-rate_{total_mu}{ext}" for rand_id in rand_ids for rep in reps for mut_win_size in mut_win_sizes for sigma in sigmas]

def get_coords_dict(rid):
    """Creates a dict string from the tmp data.frame, getting the coords"""
    chr, start, end, padded_start, padded_end = sinfo.loc[sinfo.rand_id==rid,["chr","start","end","padded_start","padded_end"]].iloc[0].to_list()
    return {"chr": chr, "start": start, "end": end, "padded_start":padded_start, "padded_end":padded_end}


diff_cols = ["delrate","delcoef","posrate","poscoef","mu", "poscoefdecayeps", "rescf", "win_len", "padding", "chr"]

header_path = "../../output/header_sims_info.tsv" 
sinfo_path = "../../output/sims_info.tsv"
recaptreespath = "../../output/"
outpath = "../../output/varmut/"
sims_sup_rand_ids = ["8MF0I020MWGI6N41PH", "CR1UIIF8NRSPZ94LGF", "HVD283AEPBL88J4NUN"]
sigmas = [f'{s:.3f}' for s in np.round(np.geomspace(0.005, 0.15, 10),3)] 
stat_win_sizes = [1000000]
mut_win_sizes = [500000, 1000000, 5000000]
reps = [0]
sample_size = 10
total_mut_rate = 2e-8
config = {"out_path": outpath, "seed":1923}

sh = pd.read_csv(header_path, sep="\t")
cols = sh.columns.to_list()
if cols[-1] != "poscoefdecayeps":
    cols.append("poscoefdecayeps")

sinfo = pd.read_csv(sinfo_path, sep="\t", header=None, names=cols)
sinfo['date'] = sinfo['date'].str.split('_', expand=True).iloc[:,[1,0]].agg('_'.join, axis=1) #removing hour, I think
sinfo = sinfo.round(15)
sinfo.rescf = sinfo.rescf.astype(str)
sinfo.sort_values(by=["date"], inplace=True)

df = sinfo[np.isin(sinfo.sup_rand_id, sims_sup_rand_ids)][diff_cols+["rand_id","sup_rand_id"]].drop_duplicates()

print(df, flush=True)

# this will be used to do the mut var sims
varmut_trees = [f"{outpath}{rand_id}/rand-id_{rand_id}_rep_{rep}_mut-win-size_{mut_win_size}_sigma_{sigma}_total-mut-rate_{total_mut_rate}.union.recap.mut.trees" for rand_id in df.rand_id.unique() for rep in reps for mut_win_size in mut_win_sizes for sigma in sigmas]
stats_files = get_stats_outfiles_from_rands(df.rand_id.unique(), stat_win_sizes, reps, mut_win_sizes, sigmas, total_mut_rate, outpath, sample_size)
joined_tsvs = get_stats_outfiles_from_rands(df.sup_rand_id.unique(), stat_win_sizes, reps, mut_win_sizes, sigmas, total_mut_rate, outpath+"joined_stats/", sample_size, sup=True, ext=".tsv")

final_stats_folders = get_stats_outfiles_from_rands(df.sup_rand_id.unique(), stat_win_sizes, reps, mut_win_sizes, sigmas, total_mut_rate, outpath+"sims_results/", sample_size, sup=True, ext="/")
final_stats_files = [f"figs/cor-pidxy-dT_sup-rand-id_{rand_id}_rep_{rep}_win-size_{mwsize}_mut-win-size_{mwsize}_sigma_{sigma}_total-mut_{total_mut_rate}_sample-size_{sample_size}_prop-acc_0.4.pdf" for rand_id in df.sup_rand_id.unique() for rep in reps for mwsize in mut_win_sizes for sigma in sigmas]
#final_stats_files = get_stats_outfiles_from_rands(df.sup_rand_id.unique(), stat_win_sizes, reps, mut_win_sizes, sigmas, total_mut_rate, "figs/cor-pidxy-dT_", sample_size, sup=True, ext=".pdf")
#final_stats_files = [f"figs/cor-pidxy-dT_sup-rand-id_{rand_id}_rep_{rep}_win-size_{wsize}_sample-size_{sample_size}_prop-acc_0.4.pdf" for rand_id in df.sup_rand_id.unique()for rep in reps for wsize in stat_win_sizes for sigma in sigmas]
final_stats = [final_stats_folders[i]+final_stats_files[i] for i in range(len(final_stats_files))]
print(varmut_trees)
print(joined_tsvs)
print(final_stats)

#from snakemake.utils import 
rule all:
    input: varmut_trees + joined_tsvs +final_stats

rule overlay_varmut:
    input: infilepath = recaptreespath + "{rand_id}/{rand_id}_rep{rep}.union.recap.mut.trees", popfilepath = recaptreespath + "{rand_id}/{rand_id}_rep{rep}.pops" 
    params: coords_dict=lambda wildcards: get_coords_dict(wildcards.rand_id), popoutfile=outpath + "{rand_id}/{rand_id}_rep{rep}.pops", region_mut_rate = lambda wildcards: sinfo[sinfo.rand_id==wildcards.rand_id].mu.unique()[0]
    output: outfile=outpath + "{rand_id}/rand-id_{rand_id}_rep_{rep}_mut-win-size_{mwsize}_sigma_{sigma}_total-mut-rate_{tmrate}.union.recap.mut.trees"
    resources: mem_mb=lambda wildcards, attempt: attempt * 256000, runtime=5*24*60
    threads: 2
    shell:
        """
        python3 ../py/overlay_varmut.py {input.infilepath} {output.outfile} {wildcards.rand_id} {wildcards.mwsize} {wildcards.tmrate} {params.region_mut_rate} {wildcards.sigma} \"{params.coords_dict}\"
        cp {input.popfilepath} {params.popoutfile}
        """
#use rule stats from sims as sims_stats with:
rule stats:
    input:
        lambda wildcards: outpath + f"{wildcards.rand_id}/rand-id_{wildcards.rand_id}_rep_{wildcards.rep}_mut-win-size_{wildcards.mwsize}_sigma_{wildcards.sigma}_total-mut-rate_{wildcards.tmrate}.union.recap.mut.trees"
    params: 
        coords_dict=lambda wildcards: get_coords_dict(wildcards.rand_id), popsfilepath = lambda wildcards: outpath + f"{wildcards.rand_id}/{wildcards.rand_id}_rep{wildcards.rep}.pops"
    benchmark:
        "../../benchmarks/rand-id_{rand_id}_rep_{rep}_win_size_{win_size}_sample-size_{sample_size}_mut-win-size_{mwsize}_sigma_{sigma}_total-mut-rate_{tmrate}.txt"
    resources: mem_mb=lambda wildcards, attempt: attempt * 96000, runtime=5*24*60
    output:
        outpath + "{rand_id}/rand-id_{rand_id}_rep_{rep}_win-size_{win_size}_sample-size_{sample_size}_mut-win-size_{mwsize}_sigma_{sigma}_total-mut-rate_{tmrate}.npz"
    threads: 2
    shell:
        "python3 ../py/stats_from_ts.py {input} {params.popsfilepath} {output} {wildcards.win_size} {wildcards.sample_size} \"{params.coords_dict}\" {wildcards.rand_id}"

#use rule join_windows from sims as sims_join_windows with:
rule join_windows:
    input:
        lambda wildcards: get_stats_outfiles_from_rands(df[df.sup_rand_id==wildcards.sup_rand_id].rand_id.unique(), [wildcards.win_size], [wildcards.rep], mut_win_sizes, [wildcards.sigma], total_mut_rate, config['out_path'], sample_size)
    benchmark:
        "../../sup-rand-id_{sup_rand_id}_rep_{rep}_win-size_{win_size}_sample-size_{sample_size}_mut-win-size_{mwsize}_sigma_{sigma}_total-mut-rate_{tmrate}.txt"
    output:
        outpath + "joined_stats/sup-rand-id_{sup_rand_id}_rep_{rep}_win-size_{win_size}_sample-size_{sample_size}_mut-win-size_{mwsize}_sigma_{sigma}_total-mut-rate_{tmrate}.npz"
    resources: mem_mb=lambda wildcards, attempt: attempt * 8000, runtime=5*24*60
    threads: 1
    output: f"{config['out_path']}joined_stats/sup-rand-id_{{sup_rand_id}}_rep_{{rep}}_win-size_{{win_size}}_sample-size_{{sample_size}}.npz"
    shell:
        "python3 ../py/join_windows.py {output} {input}"


#use rule npz_to_tsv from sims as sims_npz_to_tsv with:
rule npz_to_tsv:
    input:
        outpath + "joined_stats/sup-rand-id_{sup_rand_id}_rep_{rep}_win-size_{win_size}_sample-size_{sample_size}_mut-win-size_{mwsize}_sigma_{sigma}_total-mut-rate_{tmrate}.npz"
    output:
        outpath + "joined_stats/sup-rand-id_{sup_rand_id}_rep_{rep}_win-size_{win_size}_sample-size_{sample_size}_mut-win-size_{mwsize}_sigma_{sigma}_total-mut-rate_{tmrate}.tsv"
    resources: mem_mb=lambda wildcards, attempt: attempt * 8000, runtime=5*24*60
    threads: 1
    shell:
        "Rscript ../R/npz_to_tsv.R {input} {output}"

rule ipynb_to_r:
    input: conv_script="../R/ipynb_to_r.r", in_file="../R/plot_landscapes.ipynb"
    output: temp("../R/plot_landscapes.r")
    shell:
        "Rscript {input.conv_script} {input.in_file}"

rule run_stats:
    input:
        in_file = outpath + "joined_stats/sup-rand-id_{sup_rand_id}_rep_{rep}_win-size_{win_size}_sample-size_{sample_size}_mut-win-size_{mwsize}_sigma_{sigma}_total-mut-rate_{tmrate}.tsv", rscript="../R/plot_landscapes.r"
    output:
        outpath + "sims_results/sup-rand-id_{sup_rand_id}_rep_{rep}_win-size_{win_size}_sample-size_{sample_size}_mut-win-size_{mwsize}_sigma_{sigma}_total-mut-rate_{tmrate}/figs/cor-pidxy-dT_sup-rand-id_{sup_rand_id}_rep_{rep}_win-size_{win_size}_mut-win-size_{mwsize}_sigma_{sigma}_total-mut_{tmrate}_sample-size_{sample_size}_prop-acc_0.4.pdf"
    params: prop_acc=0.4, outpath=f"{config['out_path']}sims_results/sup-rand-id_{{sup_rand_id}}_rep_{{rep}}_win-size_{{win_size}}_sample-size_{{sample_size}}_mut-win-size_{{mwsize}}_sigma_{{sigma}}_total-mut-rate_{{tmrate}}/", outpath_figs="figs/"
    resources: mem_mb=lambda wildcards, attempt: attempt * 8000, runtime=5*24*60
    threads: 1
    shell:
        "Rscript {input.rscript} {input.in_file} {params.outpath} {params.outpath_figs} {params.prop_acc}" 
