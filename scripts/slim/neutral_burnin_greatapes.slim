// script to run the burn-in phase of a neutral model
initialize() {
	if(0) {
		defineConstant("path","/tmp/");
		defineConstant("prefix", "neutral");
		defineConstant("ancN", 100);
		defineConstant("mu", 1e-9);
		defineConstant("r", 1.5e-8);
		defineConstant("L", 5e7); // total chromosome length
		defineConstant("RAND", 123); // random identifier
		defineConstant("outfile","path+prefix+"_N_"+ancN+"_RAND_"+RAND+".trees")
	}

	initializeTreeSeq(checkCoalescence=T);

	initializeMutationRate(mu);
	//neutral mutations
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeRecombinationRate(r, L-1);
	initializeGenomicElementType("g1", asInteger("1"), 1.0);
	initializeGenomicElement(g1, 0, L-1);
}

// create a population of N individuals
//schedule sampling times depending on N
1 {
	sim.addSubpop("p1", ancN);
	sim.rescheduleScriptBlock(s0, 100*ancN, 100*ancN);
	sim.rescheduleScriptBlock(s1, 100*ancN, 100*ancN);
}

//from first gen on, check if all individuals have coalesced and if so, output a treeseq
1: late() {
	if (sim.treeSeqCoalesced() & !exists("rescheduled")) {
		defineConstant("rescheduled",1);
		catn(sim.generation + ": COALESCED");
		sim.rescheduleScriptBlock(s0, sim.generation+(2*ancN), sim.generation+(2*ancN));
	}
}

s0 10 late() {
	sim.treeSeqOutput(outfile);
	catn(outfile);
	sim.simulationFinished();
} 

s1 100 late() {
	catn("!!!!!!!!!! ABORTING !!!!!!!!!!");
	catn("NO COALESCENCE BY GENERATION "+100*ancN);
	sim.simulationFinished();
}

