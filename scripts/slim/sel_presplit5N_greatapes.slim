// script to run the burn-in phase of a neutral model
initialize() {
	if(0) {
		defineConstant("path","/tmp/");
		defineConstant("prefix", "neutral");
		defineConstant("ancN", 1000);
		defineConstant("mu", 1e-9);
		defineConstant("delcoef", -0.001);
		defineConstant("delprop", 0.3);
		defineConstant("poscoef", 0.01);
		defineConstant("posprop", 0.01);
		defineConstant("L", 132000000); // total chromosome length
		defineConstant("RAND", 123); // random identifier
		defineConstant("recfile", "~/Desktop/chr12_rec_rate_hg18.tsv");
		defineConstant("exonfile", "~/Desktop/chr12_exons_hg18.tsv");
      defineConstant("outfile","out.trees");
	}

	initializeTreeSeq();
	initializeMutationRate(asFloat(mu));
	//del mutations
	initializeMutationType("m1", 0.5, "e", asFloat(delcoef));
	initializeMutationType("m2", 0.5, "e", asFloat(poscoef));
	initializeGenomicElementType("g1", c(m1,m2), c(asFloat(delprop),asFloat(posprop)));
	//exons genomic elements
	f = readFile(exonfile);
	for (line in f) {
		coord = asInteger(strsplit(line[0], "\t")[1:2]);
		if (coord[0] > asInteger(L)-1) {
			break;
		}
		if(coord[1] > asInteger(L)-1) {
		coord[1] = asInteger(L)-1;
		}
		initializeGenomicElement(g1, coord[0], coord[1]);
	}
	//reading rec map
	lines = readFile(recfile);
	rates=NULL;
	ends=NULL;
	for (line in lines) {
		cols = strsplit(line,"\t");
		ends = c(ends, asInteger(cols[2])-1);
		rates = c(rates, asFloat(cols[3]));
	}
	rates = rates * 1e-8;
	initializeRecombinationRate(rates,ends);
	
}

// create a population of N individuals
//schedule sampling times depending on N
1 {
	sim.addSubpop("p1", asInteger(ancN));
	sim.rescheduleScriptBlock(s0, 5*asInteger(ancN), 5*asInteger(ancN));
    sim.rescheduleScriptBlock(s1, generations=seq(1,4)*asInteger(ancN));
}


s0 10 late() {
	sim.treeSeqOutput(outfile);
	catn(outfile);
	sim.simulationFinished();
}

s1 10 late() {
    sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
}
