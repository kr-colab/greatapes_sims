// neutral two population split, using burning from treeseq
initialize() {
    if (siminterval != "") {
        initializeTreeSeq(simplificationInterval=asInteger(siminterval));
    } else {
        initializeTreeSeq();
    }
    initializeMutationRate(asFloat(mu));
    //del mutations
    initializeMutationType("m1", 0.5, "g", asFloat(delcoef), 0.16); //shape per Castellano et al 2019 Genetics
    initializeMutationType("m2", 0.5, "e", asFloat(poscoef));
    initializeGenomicElementType("g1", c(m1,m2), c(asFloat(delprop),asFloat(posprop)));	
    f = readFile(exonfile);
    for (line in f) {
            coord = asInteger(strsplit(line[0], "\t")[1:2]);
            if (coord[0] > asInteger(L)-1) {
                    break;
            }
            if(coord[1] > asInteger(L)-1) {
            coord[1] = asInteger(L)-1;
            }
            initializeGenomicElement(g1, coord[0], coord[1]);
    }
    //reading rec map
    lines = readFile(recfile);
    rates=NULL;
    ends=NULL;
    for (line in lines) {
            cols = strsplit(line,"\t");
            ends = c(ends, asInteger(cols[2])-1);
            rates = c(rates, asFloat(cols[3]));
    }
    rates = rates * 1e-8;
    initializeRecombinationRate(rates,ends);
}

// create a population of N individuals
//schedule sampling times depending on N
1 late() {
    //catn(sim.generation);
    sim.readFromPopulationFile(path_burnin);
	sim.addSubpopSplit(2, asInteger(N2), 1);
	//catn(sim.generation);
    p1.setSubpopulationSize(asInteger(N1));
    sim.rescheduleScriptBlock(s0, generations=sim.generation+asInteger(gens));
    //schedule sampling after gens
    sim.rescheduleScriptBlock(s1, generations=sim.generation+asInteger(ceil(c(0.2,0.4,0.6,0.8)*asInteger(gens))));
}

10000: {
    if (sim.generation % 10000 == 0) {
        catn("You got to generation "+sim.generation);
    }
    if (sim.generation % 50000 == 0) {
        catn("Saving tree generation "+ sim.generation);
        sim.treeSeqOutput(outfile+asString(sim.generation),simplify=F);
    }
}

// wait gens after split
s0 10 late() {
	sim.treeSeqOutput(outfile);
	catn("Saving output tree in generation "+sim.generation);
    catn(outfile);
}

s1 10 late() {
    sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
}
